<?xml version='1.0' encoding='utf-8'?>
<chapter version="5.0" xml:id="concepts" xmlns="http://docbook.org/ns/docbook" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Concepts</title>
    <?dbhtml stop-chunking?>
<section xml:id="concepts-service">
        <title>Service</title>
        <para>A service represents an instance of a long running process on your server.
The client is responsible for sending heartbeats to indicate that the service is
still alive.

</para>
        <para>If a service is not heartbeated in the defined timeout interval, the
service is considered dead. When this happens, Service object is deleted
and a `service.timeout` event is inserted into the events feed.

</para>
        <para>Some example services include:

</para>
        <itemizedlist>
            <listitem>
                <para>API server instance</para>
            </listitem>
            <listitem>
                <para>Apache instance</para>
            </listitem>
            <listitem>
                <para>MySQL instance</para>
            </listitem>
            <listitem>
                <para>ZNC instance</para>
            </listitem>
            <listitem>
                <para>Long running Python / Ruby / Java application instance</para>
            </listitem>
        </itemizedlist>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="concepts-configuration">
        <title>Configuration</title>
        <para>Configuration enables clients to store arbitrary key/value pairs on the
server and get notified via an event feed when a value is updated or
deleted.

</para>
        <para>Each configuration key can contain a namespace. Namespace allows you to organize
different (related) configuration values together in a hierarchical manner.
They also make retrieving a subset of configuration values easier and more
efficient.

</para>
        <para>If a key contains a namespace, you need to refer to the configuration using a
fully qualified name which includes a namespace. For example, if a namespace is
`/production/cassandra/` and the key name is <emphasis>listen_ip</emphasis>, fully qualified key
for this value is `/production/cassandra/listen_ip`.

</para>
        <para>Example of fully qualified configuration keys:

</para>
        <itemizedlist>
            <listitem>
                <para>cassandra_listen_ip (no namespace)</para>
            </listitem>
            <listitem>
                <para>cassandra_listen_port (no namespace)</para>
            </listitem>
            <listitem>
                <para>/production/cassandra/listen_ip (namespace is /production/cassandra)</para>
            </listitem>
            <listitem>
                <para>/production/cassandra/listen_port (namespace is /production/cassandra)</para>
            </listitem>
        </itemizedlist>
        <para><figure><title>Configuration Namespaces visualized using a tree</title><mediaobject><imageobject><imagedata fileref="/img/configuration_namespaces_tree_visualization.png" align="center"/></imageobject></mediaobject></figure>

</para>
        <para>Namespaces are also ephemeral which means they only exist if at least one
configuration value is stored under it.

</para>
        <para>When retrieving values from the API you differentiate between a configuration
value based on the presence of a trailing forward slash. If a trailing slash is
present it's treated as a namespace otherwise it's treated as a configuration
key.

</para>
        <para>For example:

</para>
        <itemizedlist>
            <listitem>
                <para>GET /configuration/production/casssandra/ - cassandra is treated as a</para>
                <para>sub-namespace under namespace production.</para>
            </listitem>
            <listitem>
                <para>GET /configuration/production/cassandra - cassandra is treated as a key under</para>
                <para>production namespace.</para>
            </listitem>
        </itemizedlist>
        <para>A configuration value is an opaque string and is treated as such in our
system.

</para>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="concepts-events-feed">
        <title>Events Feed</title>
        <para>The events feed contains a list of events which occurred during the life-
time of your account. An event is inserted each time one of the following
incidents occur:

</para>
        <itemizedlist>
            <listitem>
                <para>A service is created</para>
            </listitem>
            <listitem>
                <para>A configuration value is updated</para>
            </listitem>
            <listitem>
                <para>A configuration value is removed</para>
            </listitem>
            <listitem>
                <para>A service times out</para>
            </listitem>
        </itemizedlist>
        <para><figure><title>Events feed visualized using a timeline</title><mediaobject><imageobject><imagedata fileref="/img/events_feed_timeline_visualization.png" align="center"/></imageobject></mediaobject></figure>

</para>
        <para>A typical automation use case would be periodically polling the event feed
and acting on the returned events.

</para>
        <para>Note: When you long poll the event feed you are advised to use an HTTP/1.1
persistent connection instead of opening a new connection for every request.

</para>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="concepts-event">
        <title>Event</title>
        <para>An event represents a single event in the events feed. Each event object
has the following attributes:

</para>
        <itemizedlist>
            <listitem>
                <para>id</para>
            </listitem>
            <listitem>
                <para>timestamp</para>
            </listitem>
            <listitem>
                <para>type</para>
            </listitem>
            <listitem>
                <para>payload</para>
            </listitem>
        </itemizedlist>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="concepts-id">
        <title>Id</title>
        <para>All objects in the system are identified by a unique id. You'll use an
object's id when you want to perform certain operations on it. For example,
when you want to heartbeat a service you'll need to know the service id.
</para>
    </section>
</chapter>
