<?xml version='1.0' encoding='utf-8'?>
<chapter version="5.0" xml:id="service-api-operations" xmlns="http://docbook.org/ns/docbook" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Service API Operations</title>
    <?dbhtml stop-chunking?>
<section xml:id="service-api-operations-account">
        <title>Account</title>
        <section xml:id="account-get-limits">
            <title>Get Limits</title>
            <para>This endpoint returns resource and rate limits that apply to your account.

</para>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/limits</td>
                        <td>Returns account limits.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>Get Limits Response</title>
                <programlisting language="javascript">{
    "resource": {
        "session": 100,
        "service": 200,
        "configuration_value": 1000
    },
    "rate": {
        "/.*": {
            "limit": 500000,
            "used": 0,
            "window": "24.0 hours"
        }
    }
}</programlisting>
            </example>
        </section>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="service-api-operations-sessions">
        <title>Sessions</title>
        <para>Sessions give clients the ability to manage persistent context for one or more
services. This context is then used for other operations. The client is
responsible for sending heartbeats to maintain the session.

</para>
        <section xml:id="sessions-attributes">
            <title>Attributes</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                        <td>Validation</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>heartbeat_timeout</td>
                        <td>Maximum time between heartbeats</td>
                        <td>Integer, Value (3..30)</td>
                    </tr>
                    <tr>
                        <td>metadata</td>
                        <td>Arbitrary key/value pairs.</td>
                        <td>Optional, Hash [String,String between 1 and 255 characters long:String,String between 1 and 255 characters long], Array or object with number of items between 0 and 20</td>
                    </tr>
                </tbody>
            </informaltable>
        </section>
        <section xml:id="sessions-list-sessions">
            <title>List Sessions</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/sessions</td>
                        <td>Returns sessions for this account.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>List Sessions Response</title>
                <programlisting language="javascript">{
    "values": [
        {
            "id": "sessionId",
            "metadata": {
                "region": "dfw"
            },
            "heartbeat_timeout": 30,
            "last_seen": null
        }
    ],
    "metadata": {
        "count": 1,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
        </section>
        <section xml:id="sessions-get-session">
            <title>Get Session</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/sessions/sessionId</td>
                        <td>Retrieves a single session.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>Get Session Response</title>
                <programlisting language="javascript">{
    "id": "sessionId",
    "metadata": {
        "region": "dfw"
    },
    "heartbeat_timeout": 30,
    "last_seen": null
}</programlisting>
            </example>
        </section>
        <section xml:id="sessions-create-session">
            <title>Create Session</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>POST</td>
                        <td>/sessions</td>
                        <td>Creates a new session.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (201) 'Location' header contains a link to the newly
created session and the body contains the token which should be used
when initially heartbeating this session.

</para>
            <para>Error Response Codes: 400, 401, 403, 500, 503

</para>
            <example>
                <title>Create Session Request</title>
                <programlisting language="javascript">{
    "metadata": {
        "region": "dfw"
    },
    "heartbeat_timeout": 30
}</programlisting>
            </example>
            <example>
                <title>Create Session Response</title>
                <programlisting language="javascript">{
    "token": "6bc8d050-f86a-11e1-a89e-ca2ffe480b20"
}</programlisting>
            </example>
        </section>
        <section xml:id="sessions-update-session">
            <title>Update Session</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>PUT</td>
                        <td>/sessions/sessionId</td>
                        <td>Updates an existing session.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (204) This code contains no content with an empty
response body.

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
        </section>
        <section xml:id="sessions-heartbeat-a-session">
            <title>Heartbeat a Session</title>
            <para>Heartbeating is used for telling our service that the session is still
alive. The interval in which you need to hearbeat the session is dictated
by the <emphasis>heartbeat_timeout</emphasis> attribute on the session object.

</para>
            <para>For example, if you use a <emphasis>heartbeat_timeout</emphasis> of <emphasis>30</emphasis> seconds, this means
that you need to heartbeat the session every 30 seconds or more often.
Because of possible network delay and other factors, you are advised to
heartbeat your session at least 3 seconds sooner than the
<emphasis>heartbeat_timeout</emphasis>. In this example it would be every <emphasis>27</emphasis> seconds.

</para>
            <para>When you heartbeat a session, you are advised to use an
<link xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html">HTTP/1.1 persistent connection</link>
instead of opening a new connection for every heartbeat request.

</para>
            <para>All of the official client libraries listed on the
<link linkend="client-libraries-and-tools-client-libraries">Client Libraries and Tools</link> page
re-use the same HTTP connection when heartbeating a session.

</para>
            <note>
                <para>Heartbeating a session multiple times using the same token has an
undefined behavior.</para>
            </note>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>POST</td>
                        <td>/sessions/sessionId/heartbeat</td>
                        <td>Heartbeat a session.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (200), Response body contains a token which must be
used on the next heartbeat.

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
            <example>
                <title>Session Heartbeat Request</title>
                <programlisting language="javascript">{
    "token": "6bc8d050-f86a-11e1-a89e-ca2ffe480b20"
}</programlisting>
            </example>
            <para>If this is a first heartbeat request for a session, body must include an
initial heartbeat token which has been returned when you created a session.
Otherwise you must include a token which was included in the previous
heartbeat response body.

</para>
            <example>
                <title>Session Heartbeat Response</title>
                <programlisting language="javascript">{
    "token": "36865510-f7da-11e1-b732-793f90dd0c35"
}</programlisting>
            </example>
            <para>Response body contains a token which you mean include next time you heartbeat
this session.

</para>
        </section>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="service-api-operations-services">
        <title>Services</title>
        <para>A service represents an instance of a long running process on your server.
Each service belongs to a single session which must be periodically
heartbeated to indicate that the session and its services are still alive.

</para>
        <section xml:id="services-attributes">
            <title>Attributes</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                        <td>Validation</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>id</td>
                        <td>Service id</td>
                        <td>Immutable, String between 3 and 65 characters long, String matching the regex /^[a-z0-9_\-\.]{3,65}$/i</td>
                    </tr>
                    <tr>
                        <td>session_id</td>
                        <td>Session id.</td>
                        <td>Immutable, String between 1 and 15 characters long</td>
                    </tr>
                    <tr>
                        <td>metadata</td>
                        <td>Arbitrary key/value pairs.</td>
                        <td>Optional, Hash [String,String between 1 and 255 characters long:String,String between 1 and 255 characters long], Array or object with number of items between 0 and 20</td>
                    </tr>
                    <tr>
                        <td>tags</td>
                        <td>Service tags.</td>
                        <td>Optional, Array [String,String between 1 and 55 characters long], Array or object with number of items between 0 and 10</td>
                    </tr>
                </tbody>
            </informaltable>
            <para><emphasis>tag</emphasis> field allows you to logically group services (e.g. tagging all the API
service instances with <emphasis>www</emphasis>) and retrieve a list of services for a particular
tag.

</para>
            <para><emphasis>metadata</emphasis> field allows you to store arbitrary key-value pairs on a service
object. Common fields include:

</para>
            <itemizedlist>
                <listitem>
                    <para>service instance version (e.g. git revision hash)</para>
                </listitem>
                <listitem>
                    <para>service instance IP address</para>
                </listitem>
                <listitem>
                    <para>service instance port</para>
                </listitem>
                <listitem>
                    <para>service instance region</para>
                </listitem>
                <listitem>
                    <para>status (e.g. enabled or disabled)</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="services-list-services">
            <title>List Services</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/services</td>
                        <td>Returns services for this account.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>This endpoint returns a list of services on your account.

</para>
            <para>There are no required parameters for this call. You may filter returned
services by <emphasis>tag</emphasis> with the optional query parameter <emphasis>tag</emphasis>.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>List Services Response (no filters)</title>
                <programlisting language="javascript">{
    "values": [
        {
            "id": "dfw1-api",
            "session_id": "sessionId",
            "tags": [],
            "metadata": {}
        },
        {
            "id": "dfw1-db1",
            "session_id": "sessionId",
            "tags": [
                "database",
                "mysql"
            ],
            "metadata": {
                "region": "dfw",
                "port": "3306",
                "ip": "127.0.0.1",
                "version": "5.5.24-0ubuntu0.12.04.1 (Ubuntu)"
            }
        }
    ],
    "metadata": {
        "count": 2,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
            <example>
                <title>List Services Response (filtering on a tag - /services?tag=database)</title>
                <programlisting language="javascript">{
    "values": [
        {
            "id": "dfw1-db1",
            "session_id": "sessionId",
            "tags": [
                "database",
                "mysql"
            ],
            "metadata": {
                "region": "dfw",
                "port": "3306",
                "ip": "127.0.0.1",
                "version": "5.5.24-0ubuntu0.12.04.1 (Ubuntu)"
            }
        }
    ],
    "metadata": {
        "count": 1,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
        </section>
        <section xml:id="services-get-service">
            <title>Get Service</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/services/serviceId</td>
                        <td>Retrieves a single service.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>Get Service Response</title>
                <programlisting language="javascript">{
    "id": "dfw1-db1",
    "session_id": "sessionId",
    "tags": [
        "database",
        "mysql"
    ],
    "metadata": {
        "region": "dfw",
        "port": "3306",
        "ip": "127.0.0.1",
        "version": "5.5.24-0ubuntu0.12.04.1 (Ubuntu)"
    }
}</programlisting>
            </example>
        </section>
        <section xml:id="services-create-service">
            <title>Create Service</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>POST</td>
                        <td>/services</td>
                        <td>Creates a new service.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (201) 'Location' header contains a link to the newly
created service.

</para>
            <para>Error Response Codes: 400, 401, 403, 500, 503

</para>
            <example>
                <title>Service Create Request</title>
                <programlisting language="javascript">{
    "tags": [
        "database",
        "mysql"
    ],
    "metadata": {
        "region": "dfw",
        "port": "3306",
        "ip": "127.0.0.1",
        "version": "5.5.24-0ubuntu0.12.04.1 (Ubuntu)"
    },
    "id": "dfw1-db1",
    "session_id": "sessionId"
}</programlisting>
            </example>
        </section>
        <section xml:id="services-update-service">
            <title>Update Service</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>PUT</td>
                        <td>/services/serviceId</td>
                        <td>Updates an existing service.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (204) This code contains no content with an empty
response body.

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
        </section>
        <section xml:id="services-delete-service">
            <title>Delete Service</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>DELETE</td>
                        <td>/services/serviceId</td>
                        <td>Deletes an existing service.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (204) This code contains no content with an empty
response body.

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
        </section>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="service-api-operations-configuration">
        <title>Configuration</title>
        <para>Configuration enables clients to store arbitrary key/value pairs on the
server and get notified via an event feed when a value is updated or
deleted.

</para>
        <para>A configuration value is an opaque string and is treated as such in our
system.

</para>
        <section xml:id="configuration-attributes">
            <title>Attributes</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                        <td>Validation</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>value</td>
                        <td>Configuration value</td>
                        <td>String between 1 and 1024 characters long</td>
                    </tr>
                    <tr>
                        <td>id</td>
                        <td>Configuration value id</td>
                        <td>Immutable, String between 3 and 500 characters long, String matching the regex /^(\/[a-z0-9_\-]{3,50}\/?){0,10}([a-z0-9_\-\.]{3,170})?$/i</td>
                    </tr>
                </tbody>
            </informaltable>
        </section>
        <section xml:id="configuration-list-configuration-values">
            <title>List Configuration Values</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/configuration</td>
                        <td>Returns configuration values for this account.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>List Configuration Values</title>
                <programlisting language="javascript">{
    "values": [
        {
            "id": "/production/cassandra/listen_ip",
            "value": "value for /production/cassandra/listen_ip"
        },
        {
            "id": "/production/cassandra/listen_port",
            "value": "value for /production/cassandra/listen_port"
        },
        {
            "id": "/production/cassandra/rpc_server/timeout",
            "value": "value for /production/cassandra/rpc_server/timeout"
        },
        {
            "id": "/production/cassandra/rpc_server/type",
            "value": "value for /production/cassandra/rpc_server/type"
        },
        {
            "id": "/production/zookeeper/listen_ip",
            "value": "value for /production/zookeeper/listen_ip"
        },
        {
            "id": "/production/zookeeper/listen_port",
            "value": "value for /production/zookeeper/listen_port"
        },
        {
            "id": "configId",
            "value": "test value 123456"
        },
        {
            "id": "configId1",
            "value": "test value 123456"
        },
        {
            "id": "configId2",
            "value": "test value 123456"
        }
    ],
    "metadata": {
        "count": 9,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
        </section>
        <section xml:id="configuration-list-configuration-values-under-a-namespace">
            <title>List Configuration Values Under a Namespace</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/configuration/&lt;namespace 1&gt;/&lt;namespace n&gt;/</td>
                        <td>Returns configuration values for the provided namespace and all the sub namespaces.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <note>
                <para>When retrieving all the configuration values under a namespace you need to
include a trailing slash after the last namespace. If you don't do that it will
be treated like you are retrieving a single configuration value.</para>
            </note>
            <example>
                <title>List Configuration Values Under a Namespace Response (GET /configuration/production/cassandra/)</title>
                <programlisting language="javascript">{
    "values": [
        {
            "id": "/production/cassandra/listen_ip",
            "value": "value for /production/cassandra/listen_ip"
        },
        {
            "id": "/production/cassandra/listen_port",
            "value": "value for /production/cassandra/listen_port"
        },
        {
            "id": "/production/cassandra/rpc_server/timeout",
            "value": "value for /production/cassandra/rpc_server/timeout"
        },
        {
            "id": "/production/cassandra/rpc_server/type",
            "value": "value for /production/cassandra/rpc_server/type"
        }
    ],
    "metadata": {
        "count": 4,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
        </section>
        <section xml:id="configuration-get-configuration-value">
            <title>Get Configuration Value</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/configuration/configurationId</td>
                        <td>Retrieves a single configuration value.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <example>
                <title>Get Configuration Value</title>
                <programlisting language="javascript">{
    "id": "configId",
    "value": "test value 123456"
}</programlisting>
            </example>
        </section>
        <section xml:id="configuration-set-configuration-value">
            <title>Set Configuration Value</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>PUT</td>
                        <td>/configuration/configurationId</td>
                        <td>Sets a configuration value.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (204) This code contains no content with an empty
response body.

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
            <example>
                <title>Configuration Value Set Request</title>
                <programlisting language="javascript">{
    "value": "test value 123456"
}</programlisting>
            </example>
        </section>
        <section xml:id="configuration-delete-configuration-value">
            <title>Delete Configuration Value</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>DELETE</td>
                        <td>/configuration/configurationId</td>
                        <td>Deletes a configuration value.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>Normal Response Code: (204) This code contains no content with an empty
response body.

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
        </section>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="service-api-operations-events">
        <title>Events</title>
        <para>Events feed contains a list of events which occurred during the life-time
of your account. Every time a service joins a session, a configuration
value is updated or removed, or a session times out, an event is inserted.

</para>
        <section xml:id="events-event-object-attributes">
            <title>Event Object Attributes</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Name</td>
                        <td>Description</td>
                        <td>Validation</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>id</td>
                        <td>Event id</td>
                        <td>Immutable, String between 3 and 255 characters long</td>
                    </tr>
                    <tr>
                        <td>timestamp</td>
                        <td>Event timestamp</td>
                        <td>Integer</td>
                    </tr>
                    <tr>
                        <td>type</td>
                        <td>Event type</td>
                        <td>String</td>
                    </tr>
                    <tr>
                        <td>payload</td>
                        <td>Event payload.</td>
                        <td>Optional, Optional, Hash [String,String between 1 and 255 characters long:String,String between 1 and 255 characters long]</td>
                    </tr>
                </tbody>
            </informaltable>
        </section>
        <section xml:id="events-event-types">
            <title>Event Types</title>
            <section xml:id="event-types-servicejoin">
                <title>service.join</title>
                <para>This event represents a new service joining a session. The payload contains
a service object.

</para>
            </section>
            <section xml:id="event-types-servicestimeout">
                <title>services.timeout</title>
                <para>This event represents a session timeout, which occurs when a client doesn't
heartbeat a session within the defined timeout. The payload contains a list
of services associated with the session.

</para>
            </section>
            <section xml:id="event-types-configuration_valueupdate">
                <title>configuration_value.update</title>
                <para>This event represents a configuration value being updated. The payload
contains the configuration value id, the old value, and the new value. If
this is the first time the value has been set, the old value will be <emphasis>null</emphasis>.

</para>
            </section>
            <section xml:id="event-types-configuration_valueremove">
                <title>configuration_value.remove</title>
                <para>This event represents a configuration value being removed. The payload
contains the configuration value id and the old value.

</para>
            </section>
        </section>
        <section xml:id="events-list-events">
            <title>List Events</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/events</td>
                        <td>Returns a list of events for this account.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 401, 403, 500, 503

</para>
            <para>A client can specify the optional <emphasis>marker</emphasis> query parameter. If the marker is
provided, only the events with ids that are newer or equal to the  marker are
returned. If no marker is provided, events from the last 24 hours are
returned.

</para>
            <example>
                <title>List Events Response</title>
                <programlisting language="javascript">{
    "values": [
        {
            "id": "6bc8d050-f86a-11e1-a89e-ca2ffe480b20",
            "timestamp": 1346967146370,
            "type": "service.join",
            "payload": {
                "id": "dfw1-api",
                "session_id": "sessionId",
                "tags": [],
                "metadata": {}
            }
        },
        {
            "type": "service.join",
            "payload": {
                "id": "dfw1-db1",
                "session_id": "sessionId",
                "tags": [
                    "database",
                    "mysql"
                ],
                "metadata": {
                    "region": "dfw",
                    "port": "3306",
                    "ip": "127.0.0.1",
                    "version": "5.5.24-0ubuntu0.12.04.1 (Ubuntu)"
                }
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "test value 123456",
                "configuration_value_id": "configId2"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "test value 123456",
                "configuration_value_id": "configId1"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "test value 123456",
                "configuration_value_id": "configId"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "value for /production/zookeeper/listen_ip",
                "configuration_value_id": "/production/zookeeper/listen_ip"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "value for /production/cassandra/rpc_server/type",
                "configuration_value_id": "/production/cassandra/rpc_server/type"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "value for /production/cassandra/listen_port",
                "configuration_value_id": "/production/cassandra/listen_port"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "value for /production/cassandra/listen_ip",
                "configuration_value_id": "/production/cassandra/listen_ip"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "value for /production/cassandra/rpc_server/timeout",
                "configuration_value_id": "/production/cassandra/rpc_server/timeout"
            }
        },
        {
            "type": "configuration_value.update",
            "payload": {
                "old_value": null,
                "new_value": "value for /production/zookeeper/listen_port",
                "configuration_value_id": "/production/zookeeper/listen_port"
            }
        }
    ],
    "metadata": {
        "count": 11,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
        </section>
    </section>
    <?dbhtml stop-chunking?>
<section xml:id="service-api-operations-views">
        <title>Views</title>
        <para>Views contain a combination of data that usually includes multiple different
objects. The primary purpose of a view is to save API calls and make data
retrieval more efficient. Instead of doing multiple API calls and then
combining the result yourself, you can perform a single API call against the
view endpoint.

</para>
        <section xml:id="views-get-overview">
            <title>Get Overview</title>
            <informaltable rules="all">
                <thead xmlns="http://docbook.org/ns/docbook">
                    <tr>
                        <td>Verb</td>
                        <td>URI</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>GET</td>
                        <td>/views/overview</td>
                        <td>Returns the overview view for this account.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para>There are no required parameters for this call.

</para>
            <para>Normal Response Code: 200

</para>
            <para>Error Response Codes: 400, 401, 403, 404, 500, 503

</para>
            <para>This view includes a list of sessions on your account and each session's
child service objects.

</para>
            <example>
                <title>Get Overview Response</title>
                <programlisting language="javascript">{
    "values": [
        {
            "session": {
                "id": "seId0",
                "metadata": {
                    "region": "dfw"
                },
                "heartbeat_timeout": 30,
                "last_seen": null
            },
            "services": [
                {
                    "id": "dfw1-api",
                    "session_id": "seId0",
                    "tags": [],
                    "metadata": {}
                },
                {
                    "id": "dfw1-db1",
                    "session_id": "seId0",
                    "tags": [
                        "database",
                        "mysql"
                    ],
                    "metadata": {
                        "region": "dfw",
                        "port": "3306",
                        "ip": "127.0.0.1",
                        "version": "5.5.24-0ubuntu0.12.04.1 (Ubuntu)"
                    }
                }
            ]
        }
    ],
    "metadata": {
        "count": 1,
        "limit": 100,
        "marker": null,
        "next_marker": null,
        "next_href": null
    }
}</programlisting>
            </example>
        </section>
    </section>
</chapter>
